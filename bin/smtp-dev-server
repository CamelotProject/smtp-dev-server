#!/usr/bin/env php
<?php

use Camelot\SmtpDevServer\Event\MessageEventListener;
use Camelot\SmtpDevServer\Server;
use Camelot\SmtpDevServer\Storage\MailboxStorage;
use Camelot\SmtpDevServer\Storage\MemoryStorage;
use Camelot\SmtpDevServer\Storage\NullStorage;
use Monolog\Handler\StreamHandler;
use Monolog\Level;
use Monolog\Logger;
use Symfony\Component\Console\Descriptor\TextDescriptor;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputDefinition;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\EventDispatcher\EventDispatcher;

$run = function (): void {
    if (is_file(dirname(__DIR__) . '/vendor/autoload.php')) {
        $baseDir = dirname(__DIR__);
        require_once $baseDir . '/vendor/autoload.php';
    } elseif (is_file(dirname(__DIR__, 3) . '/autoload.php')) {
        $baseDir = dirname(__DIR__, 3);
        require_once $baseDir . '/autoload.php';
    } else {
        throw new LogicException('Composer autoload is missing. Try running "composer install".');
    }

    $inputDefinition = new InputDefinition();
    $inputDefinition->addArgument(new InputArgument('backing', InputOption::VALUE_REQUIRED, 'Storage type (null, memory, mailbox)', 'mailbox'));
    $inputDefinition->addOption(new InputOption('ip', 'i', InputOption::VALUE_REQUIRED, 'TCP/IP address', '127.0.0.1'));
    $inputDefinition->addOption(new InputOption('port', 'p', InputOption::VALUE_REQUIRED, 'Port', 2525));
    $inputDefinition->addOption(new InputOption('help', 'h', InputOption::VALUE_NONE, 'Show help'));

    $input = new ArgvInput(null, $inputDefinition);
    $output = new ConsoleOutput();
    $io = new SymfonyStyle($input, $output);

    if ($input->getOption('help')) {
        $io->writeln(
            <<<'EOF'

                The <info>smtp-dev-server</info> command runs a "fake" SMTP server for development testing needs.

                EOF
        );
        $descriptor = new TextDescriptor();
        $descriptor->describe($output, $inputDefinition);
        $io->writeln(PHP_EOL);

        return;
    }

    $host = $input->getOption('ip');
    $port = $input->getOption('port');
    $storage = match ($input->getArgument('backing')) {
        'null' => new NullStorage(),
        'memory' => new MemoryStorage(),
        default => new MailboxStorage($baseDir . '/var/spool'),
    };

    $io->title('Starting SMTP server');
    $io->listing(["Host:\t{$host}", "Port:\t{$port}", "Storage:\t" . $storage::class]);

    $dispatcher = new EventDispatcher();
    $dispatcher->addSubscriber(new MessageEventListener($storage));
    $logger = new Logger('smtp');
    $logger->pushHandler(new StreamHandler("{$baseDir}/var/log/smtp.log", Level::Debug));
    $server = new Server($host, $port, $dispatcher, $logger);
    $server->start($output);
    $io->info('Waiting for connections');

    $server->listen();
};

$run();
